// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: search_config.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SearchConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchConfigMultiError, or
// nil if none found.
func (m *SearchConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _SearchConfig_SearcherType_InLookup[m.GetSearcherType()]; !ok {
		err := SearchConfigValidationError{
			field:  "SearcherType",
			reason: "value must be in list [colbert opensearch]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetReranker()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchConfigValidationError{
					field:  "Reranker",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchConfigValidationError{
					field:  "Reranker",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReranker()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchConfigValidationError{
				field:  "Reranker",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UseGroup

	if len(errors) > 0 {
		return SearchConfigMultiError(errors)
	}

	return nil
}

// SearchConfigMultiError is an error wrapping multiple validation errors
// returned by SearchConfig.ValidateAll() if the designated constraints aren't met.
type SearchConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchConfigMultiError) AllErrors() []error { return m }

// SearchConfigValidationError is the validation error returned by
// SearchConfig.Validate if the designated constraints aren't met.
type SearchConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchConfigValidationError) ErrorName() string { return "SearchConfigValidationError" }

// Error satisfies the builtin error interface
func (e SearchConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchConfigValidationError{}

var _SearchConfig_SearcherType_InLookup = map[string]struct{}{
	"colbert":    {},
	"opensearch": {},
}

// Validate checks the field values on Reranker with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reranker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reranker with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RerankerMultiError, or nil
// if none found.
func (m *Reranker) ValidateAll() error {
	return m.validate(true)
}

func (m *Reranker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Reranker_RerankerType_InLookup[m.GetRerankerType()]; !ok {
		err := RerankerValidationError{
			field:  "RerankerType",
			reason: "value must be in list [e5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetQuerySource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RerankerValidationError{
					field:  "QuerySource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RerankerValidationError{
					field:  "QuerySource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuerySource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RerankerValidationError{
				field:  "QuerySource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DedupField

	if len(errors) > 0 {
		return RerankerMultiError(errors)
	}

	return nil
}

// RerankerMultiError is an error wrapping multiple validation errors returned
// by Reranker.ValidateAll() if the designated constraints aren't met.
type RerankerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RerankerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RerankerMultiError) AllErrors() []error { return m }

// RerankerValidationError is the validation error returned by
// Reranker.Validate if the designated constraints aren't met.
type RerankerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RerankerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RerankerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RerankerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RerankerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RerankerValidationError) ErrorName() string { return "RerankerValidationError" }

// Error satisfies the builtin error interface
func (e RerankerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReranker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RerankerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RerankerValidationError{}

var _Reranker_RerankerType_InLookup = map[string]struct{}{
	"e5": {},
}

// Validate checks the field values on Reranker_QuerySource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Reranker_QuerySource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reranker_QuerySource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Reranker_QuerySourceMultiError, or nil if none found.
func (m *Reranker_QuerySource) ValidateAll() error {
	return m.validate(true)
}

func (m *Reranker_QuerySource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Source.(type) {
	case *Reranker_QuerySource_RawQuery_:
		if v == nil {
			err := Reranker_QuerySourceValidationError{
				field:  "Source",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRawQuery()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Reranker_QuerySourceValidationError{
						field:  "RawQuery",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Reranker_QuerySourceValidationError{
						field:  "RawQuery",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRawQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Reranker_QuerySourceValidationError{
					field:  "RawQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Reranker_QuerySource_Query_:
		if v == nil {
			err := Reranker_QuerySourceValidationError{
				field:  "Source",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQuery()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Reranker_QuerySourceValidationError{
						field:  "Query",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Reranker_QuerySourceValidationError{
						field:  "Query",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Reranker_QuerySourceValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Reranker_QuerySource_ConcatQueryAndRawQuery_:
		if v == nil {
			err := Reranker_QuerySourceValidationError{
				field:  "Source",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConcatQueryAndRawQuery()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Reranker_QuerySourceValidationError{
						field:  "ConcatQueryAndRawQuery",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Reranker_QuerySourceValidationError{
						field:  "ConcatQueryAndRawQuery",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConcatQueryAndRawQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Reranker_QuerySourceValidationError{
					field:  "ConcatQueryAndRawQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return Reranker_QuerySourceMultiError(errors)
	}

	return nil
}

// Reranker_QuerySourceMultiError is an error wrapping multiple validation
// errors returned by Reranker_QuerySource.ValidateAll() if the designated
// constraints aren't met.
type Reranker_QuerySourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Reranker_QuerySourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Reranker_QuerySourceMultiError) AllErrors() []error { return m }

// Reranker_QuerySourceValidationError is the validation error returned by
// Reranker_QuerySource.Validate if the designated constraints aren't met.
type Reranker_QuerySourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Reranker_QuerySourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Reranker_QuerySourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Reranker_QuerySourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Reranker_QuerySourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Reranker_QuerySourceValidationError) ErrorName() string {
	return "Reranker_QuerySourceValidationError"
}

// Error satisfies the builtin error interface
func (e Reranker_QuerySourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReranker_QuerySource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Reranker_QuerySourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Reranker_QuerySourceValidationError{}

// Validate checks the field values on Reranker_QuerySource_Query with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Reranker_QuerySource_Query) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reranker_QuerySource_Query with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Reranker_QuerySource_QueryMultiError, or nil if none found.
func (m *Reranker_QuerySource_Query) ValidateAll() error {
	return m.validate(true)
}

func (m *Reranker_QuerySource_Query) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	if len(errors) > 0 {
		return Reranker_QuerySource_QueryMultiError(errors)
	}

	return nil
}

// Reranker_QuerySource_QueryMultiError is an error wrapping multiple
// validation errors returned by Reranker_QuerySource_Query.ValidateAll() if
// the designated constraints aren't met.
type Reranker_QuerySource_QueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Reranker_QuerySource_QueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Reranker_QuerySource_QueryMultiError) AllErrors() []error { return m }

// Reranker_QuerySource_QueryValidationError is the validation error returned
// by Reranker_QuerySource_Query.Validate if the designated constraints aren't met.
type Reranker_QuerySource_QueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Reranker_QuerySource_QueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Reranker_QuerySource_QueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Reranker_QuerySource_QueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Reranker_QuerySource_QueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Reranker_QuerySource_QueryValidationError) ErrorName() string {
	return "Reranker_QuerySource_QueryValidationError"
}

// Error satisfies the builtin error interface
func (e Reranker_QuerySource_QueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReranker_QuerySource_Query.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Reranker_QuerySource_QueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Reranker_QuerySource_QueryValidationError{}

// Validate checks the field values on Reranker_QuerySource_RawQuery with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Reranker_QuerySource_RawQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reranker_QuerySource_RawQuery with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Reranker_QuerySource_RawQueryMultiError, or nil if none found.
func (m *Reranker_QuerySource_RawQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *Reranker_QuerySource_RawQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Reranker_QuerySource_RawQueryMultiError(errors)
	}

	return nil
}

// Reranker_QuerySource_RawQueryMultiError is an error wrapping multiple
// validation errors returned by Reranker_QuerySource_RawQuery.ValidateAll()
// if the designated constraints aren't met.
type Reranker_QuerySource_RawQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Reranker_QuerySource_RawQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Reranker_QuerySource_RawQueryMultiError) AllErrors() []error { return m }

// Reranker_QuerySource_RawQueryValidationError is the validation error
// returned by Reranker_QuerySource_RawQuery.Validate if the designated
// constraints aren't met.
type Reranker_QuerySource_RawQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Reranker_QuerySource_RawQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Reranker_QuerySource_RawQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Reranker_QuerySource_RawQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Reranker_QuerySource_RawQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Reranker_QuerySource_RawQueryValidationError) ErrorName() string {
	return "Reranker_QuerySource_RawQueryValidationError"
}

// Error satisfies the builtin error interface
func (e Reranker_QuerySource_RawQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReranker_QuerySource_RawQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Reranker_QuerySource_RawQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Reranker_QuerySource_RawQueryValidationError{}

// Validate checks the field values on
// Reranker_QuerySource_ConcatQueryAndRawQuery with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reranker_QuerySource_ConcatQueryAndRawQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// Reranker_QuerySource_ConcatQueryAndRawQuery with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// Reranker_QuerySource_ConcatQueryAndRawQueryMultiError, or nil if none found.
func (m *Reranker_QuerySource_ConcatQueryAndRawQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *Reranker_QuerySource_ConcatQueryAndRawQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	if len(errors) > 0 {
		return Reranker_QuerySource_ConcatQueryAndRawQueryMultiError(errors)
	}

	return nil
}

// Reranker_QuerySource_ConcatQueryAndRawQueryMultiError is an error wrapping
// multiple validation errors returned by
// Reranker_QuerySource_ConcatQueryAndRawQuery.ValidateAll() if the designated
// constraints aren't met.
type Reranker_QuerySource_ConcatQueryAndRawQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Reranker_QuerySource_ConcatQueryAndRawQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Reranker_QuerySource_ConcatQueryAndRawQueryMultiError) AllErrors() []error { return m }

// Reranker_QuerySource_ConcatQueryAndRawQueryValidationError is the validation
// error returned by Reranker_QuerySource_ConcatQueryAndRawQuery.Validate if
// the designated constraints aren't met.
type Reranker_QuerySource_ConcatQueryAndRawQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Reranker_QuerySource_ConcatQueryAndRawQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Reranker_QuerySource_ConcatQueryAndRawQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Reranker_QuerySource_ConcatQueryAndRawQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Reranker_QuerySource_ConcatQueryAndRawQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Reranker_QuerySource_ConcatQueryAndRawQueryValidationError) ErrorName() string {
	return "Reranker_QuerySource_ConcatQueryAndRawQueryValidationError"
}

// Error satisfies the builtin error interface
func (e Reranker_QuerySource_ConcatQueryAndRawQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReranker_QuerySource_ConcatQueryAndRawQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Reranker_QuerySource_ConcatQueryAndRawQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Reranker_QuerySource_ConcatQueryAndRawQueryValidationError{}
