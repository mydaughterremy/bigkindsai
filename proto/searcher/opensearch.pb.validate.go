// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: searcher/opensearch.proto

package searcher

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OpenSearchSearcher with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenSearchSearcher) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenSearchSearcher with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenSearchSearcherMultiError, or nil if none found.
func (m *OpenSearchSearcher) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenSearchSearcher) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IndexName

	if all {
		switch v := interface{}(m.GetCompoundStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpenSearchSearcherValidationError{
					field:  "CompoundStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpenSearchSearcherValidationError{
					field:  "CompoundStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompoundStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenSearchSearcherValidationError{
				field:  "CompoundStrategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.QueryStrategy.(type) {
	case *OpenSearchSearcher_TextQueryStrategy_:
		if v == nil {
			err := OpenSearchSearcherValidationError{
				field:  "QueryStrategy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTextQueryStrategy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OpenSearchSearcherValidationError{
						field:  "TextQueryStrategy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OpenSearchSearcherValidationError{
						field:  "TextQueryStrategy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTextQueryStrategy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpenSearchSearcherValidationError{
					field:  "TextQueryStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *OpenSearchSearcher_VectorQueryStrategy_:
		if v == nil {
			err := OpenSearchSearcherValidationError{
				field:  "QueryStrategy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetVectorQueryStrategy()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OpenSearchSearcherValidationError{
						field:  "VectorQueryStrategy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OpenSearchSearcherValidationError{
						field:  "VectorQueryStrategy",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVectorQueryStrategy()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpenSearchSearcherValidationError{
					field:  "VectorQueryStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return OpenSearchSearcherMultiError(errors)
	}

	return nil
}

// OpenSearchSearcherMultiError is an error wrapping multiple validation errors
// returned by OpenSearchSearcher.ValidateAll() if the designated constraints
// aren't met.
type OpenSearchSearcherMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenSearchSearcherMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenSearchSearcherMultiError) AllErrors() []error { return m }

// OpenSearchSearcherValidationError is the validation error returned by
// OpenSearchSearcher.Validate if the designated constraints aren't met.
type OpenSearchSearcherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenSearchSearcherValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenSearchSearcherValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenSearchSearcherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenSearchSearcherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenSearchSearcherValidationError) ErrorName() string {
	return "OpenSearchSearcherValidationError"
}

// Error satisfies the builtin error interface
func (e OpenSearchSearcherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenSearchSearcher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenSearchSearcherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenSearchSearcherValidationError{}

// Validate checks the field values on OpenSearchSearcher_Field with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenSearchSearcher_Field) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenSearchSearcher_Field with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenSearchSearcher_FieldMultiError, or nil if none found.
func (m *OpenSearchSearcher_Field) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenSearchSearcher_Field) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetValueType()) < 1 {
		err := OpenSearchSearcher_FieldValidationError{
			field:  "ValueType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _OpenSearchSearcher_Field_QueryType_InLookup[m.GetQueryType()]; !ok {
		err := OpenSearchSearcher_FieldValidationError{
			field:  "QueryType",
			reason: "value must be in list [filter should]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SourceField

	// no validation rules for SecondaryShould

	if len(errors) > 0 {
		return OpenSearchSearcher_FieldMultiError(errors)
	}

	return nil
}

// OpenSearchSearcher_FieldMultiError is an error wrapping multiple validation
// errors returned by OpenSearchSearcher_Field.ValidateAll() if the designated
// constraints aren't met.
type OpenSearchSearcher_FieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenSearchSearcher_FieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenSearchSearcher_FieldMultiError) AllErrors() []error { return m }

// OpenSearchSearcher_FieldValidationError is the validation error returned by
// OpenSearchSearcher_Field.Validate if the designated constraints aren't met.
type OpenSearchSearcher_FieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenSearchSearcher_FieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenSearchSearcher_FieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenSearchSearcher_FieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenSearchSearcher_FieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenSearchSearcher_FieldValidationError) ErrorName() string {
	return "OpenSearchSearcher_FieldValidationError"
}

// Error satisfies the builtin error interface
func (e OpenSearchSearcher_FieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenSearchSearcher_Field.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenSearchSearcher_FieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenSearchSearcher_FieldValidationError{}

var _OpenSearchSearcher_Field_QueryType_InLookup = map[string]struct{}{
	"filter": {},
	"should": {},
}

// Validate checks the field values on OpenSearchSearcher_TextQueryStrategy
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *OpenSearchSearcher_TextQueryStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenSearchSearcher_TextQueryStrategy
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// OpenSearchSearcher_TextQueryStrategyMultiError, or nil if none found.
func (m *OpenSearchSearcher_TextQueryStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenSearchSearcher_TextQueryStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _OpenSearchSearcher_TextQueryStrategy_ScoringMode_InLookup[m.GetScoringMode()]; !ok {
		err := OpenSearchSearcher_TextQueryStrategyValidationError{
			field:  "ScoringMode",
			reason: "value must be in list [relevance softmax harmonic]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetFields()))
		i := 0
		for key := range m.GetFields() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetFields()[key]
			_ = val

			// no validation rules for Fields[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, OpenSearchSearcher_TextQueryStrategyValidationError{
							field:  fmt.Sprintf("Fields[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, OpenSearchSearcher_TextQueryStrategyValidationError{
							field:  fmt.Sprintf("Fields[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return OpenSearchSearcher_TextQueryStrategyValidationError{
						field:  fmt.Sprintf("Fields[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return OpenSearchSearcher_TextQueryStrategyMultiError(errors)
	}

	return nil
}

// OpenSearchSearcher_TextQueryStrategyMultiError is an error wrapping multiple
// validation errors returned by
// OpenSearchSearcher_TextQueryStrategy.ValidateAll() if the designated
// constraints aren't met.
type OpenSearchSearcher_TextQueryStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenSearchSearcher_TextQueryStrategyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenSearchSearcher_TextQueryStrategyMultiError) AllErrors() []error { return m }

// OpenSearchSearcher_TextQueryStrategyValidationError is the validation error
// returned by OpenSearchSearcher_TextQueryStrategy.Validate if the designated
// constraints aren't met.
type OpenSearchSearcher_TextQueryStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenSearchSearcher_TextQueryStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenSearchSearcher_TextQueryStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenSearchSearcher_TextQueryStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenSearchSearcher_TextQueryStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenSearchSearcher_TextQueryStrategyValidationError) ErrorName() string {
	return "OpenSearchSearcher_TextQueryStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e OpenSearchSearcher_TextQueryStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenSearchSearcher_TextQueryStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenSearchSearcher_TextQueryStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenSearchSearcher_TextQueryStrategyValidationError{}

var _OpenSearchSearcher_TextQueryStrategy_ScoringMode_InLookup = map[string]struct{}{
	"relevance": {},
	"softmax":   {},
	"harmonic":  {},
}

// Validate checks the field values on OpenSearchSearcher_VectorQueryStrategy
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *OpenSearchSearcher_VectorQueryStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// OpenSearchSearcher_VectorQueryStrategy with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// OpenSearchSearcher_VectorQueryStrategyMultiError, or nil if none found.
func (m *OpenSearchSearcher_VectorQueryStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenSearchSearcher_VectorQueryStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKnnStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpenSearchSearcher_VectorQueryStrategyValidationError{
					field:  "KnnStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpenSearchSearcher_VectorQueryStrategyValidationError{
					field:  "KnnStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKnnStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenSearchSearcher_VectorQueryStrategyValidationError{
				field:  "KnnStrategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilterStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpenSearchSearcher_VectorQueryStrategyValidationError{
					field:  "FilterStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpenSearchSearcher_VectorQueryStrategyValidationError{
					field:  "FilterStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilterStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenSearchSearcher_VectorQueryStrategyValidationError{
				field:  "FilterStrategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEncoder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpenSearchSearcher_VectorQueryStrategyValidationError{
					field:  "Encoder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpenSearchSearcher_VectorQueryStrategyValidationError{
					field:  "Encoder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEncoder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenSearchSearcher_VectorQueryStrategyValidationError{
				field:  "Encoder",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OpenSearchSearcher_VectorQueryStrategyMultiError(errors)
	}

	return nil
}

// OpenSearchSearcher_VectorQueryStrategyMultiError is an error wrapping
// multiple validation errors returned by
// OpenSearchSearcher_VectorQueryStrategy.ValidateAll() if the designated
// constraints aren't met.
type OpenSearchSearcher_VectorQueryStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenSearchSearcher_VectorQueryStrategyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenSearchSearcher_VectorQueryStrategyMultiError) AllErrors() []error { return m }

// OpenSearchSearcher_VectorQueryStrategyValidationError is the validation
// error returned by OpenSearchSearcher_VectorQueryStrategy.Validate if the
// designated constraints aren't met.
type OpenSearchSearcher_VectorQueryStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenSearchSearcher_VectorQueryStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenSearchSearcher_VectorQueryStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenSearchSearcher_VectorQueryStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenSearchSearcher_VectorQueryStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenSearchSearcher_VectorQueryStrategyValidationError) ErrorName() string {
	return "OpenSearchSearcher_VectorQueryStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e OpenSearchSearcher_VectorQueryStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenSearchSearcher_VectorQueryStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenSearchSearcher_VectorQueryStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenSearchSearcher_VectorQueryStrategyValidationError{}

// Validate checks the field values on OpenSearchSearcher_CompoundStrategy with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *OpenSearchSearcher_CompoundStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenSearchSearcher_CompoundStrategy
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// OpenSearchSearcher_CompoundStrategyMultiError, or nil if none found.
func (m *OpenSearchSearcher_CompoundStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenSearchSearcher_CompoundStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.CompoundStrategy.(type) {
	case *OpenSearchSearcher_CompoundStrategy_FunctionScore_:
		if v == nil {
			err := OpenSearchSearcher_CompoundStrategyValidationError{
				field:  "CompoundStrategy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFunctionScore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OpenSearchSearcher_CompoundStrategyValidationError{
						field:  "FunctionScore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OpenSearchSearcher_CompoundStrategyValidationError{
						field:  "FunctionScore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFunctionScore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpenSearchSearcher_CompoundStrategyValidationError{
					field:  "FunctionScore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return OpenSearchSearcher_CompoundStrategyMultiError(errors)
	}

	return nil
}

// OpenSearchSearcher_CompoundStrategyMultiError is an error wrapping multiple
// validation errors returned by
// OpenSearchSearcher_CompoundStrategy.ValidateAll() if the designated
// constraints aren't met.
type OpenSearchSearcher_CompoundStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenSearchSearcher_CompoundStrategyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenSearchSearcher_CompoundStrategyMultiError) AllErrors() []error { return m }

// OpenSearchSearcher_CompoundStrategyValidationError is the validation error
// returned by OpenSearchSearcher_CompoundStrategy.Validate if the designated
// constraints aren't met.
type OpenSearchSearcher_CompoundStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenSearchSearcher_CompoundStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenSearchSearcher_CompoundStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenSearchSearcher_CompoundStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenSearchSearcher_CompoundStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenSearchSearcher_CompoundStrategyValidationError) ErrorName() string {
	return "OpenSearchSearcher_CompoundStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e OpenSearchSearcher_CompoundStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenSearchSearcher_CompoundStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenSearchSearcher_CompoundStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenSearchSearcher_CompoundStrategyValidationError{}

// Validate checks the field values on
// OpenSearchSearcher_VectorQueryStrategy_KNNStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OpenSearchSearcher_VectorQueryStrategy_KNNStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// OpenSearchSearcher_VectorQueryStrategy_KNNStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// OpenSearchSearcher_VectorQueryStrategy_KNNStrategyMultiError, or nil if
// none found.
func (m *OpenSearchSearcher_VectorQueryStrategy_KNNStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenSearchSearcher_VectorQueryStrategy_KNNStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetField()) < 1 {
		err := OpenSearchSearcher_VectorQueryStrategy_KNNStrategyValidationError{
			field:  "Field",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SourceField

	// no validation rules for K

	if len(errors) > 0 {
		return OpenSearchSearcher_VectorQueryStrategy_KNNStrategyMultiError(errors)
	}

	return nil
}

// OpenSearchSearcher_VectorQueryStrategy_KNNStrategyMultiError is an error
// wrapping multiple validation errors returned by
// OpenSearchSearcher_VectorQueryStrategy_KNNStrategy.ValidateAll() if the
// designated constraints aren't met.
type OpenSearchSearcher_VectorQueryStrategy_KNNStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenSearchSearcher_VectorQueryStrategy_KNNStrategyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenSearchSearcher_VectorQueryStrategy_KNNStrategyMultiError) AllErrors() []error { return m }

// OpenSearchSearcher_VectorQueryStrategy_KNNStrategyValidationError is the
// validation error returned by
// OpenSearchSearcher_VectorQueryStrategy_KNNStrategy.Validate if the
// designated constraints aren't met.
type OpenSearchSearcher_VectorQueryStrategy_KNNStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenSearchSearcher_VectorQueryStrategy_KNNStrategyValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e OpenSearchSearcher_VectorQueryStrategy_KNNStrategyValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e OpenSearchSearcher_VectorQueryStrategy_KNNStrategyValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e OpenSearchSearcher_VectorQueryStrategy_KNNStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenSearchSearcher_VectorQueryStrategy_KNNStrategyValidationError) ErrorName() string {
	return "OpenSearchSearcher_VectorQueryStrategy_KNNStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e OpenSearchSearcher_VectorQueryStrategy_KNNStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenSearchSearcher_VectorQueryStrategy_KNNStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenSearchSearcher_VectorQueryStrategy_KNNStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenSearchSearcher_VectorQueryStrategy_KNNStrategyValidationError{}

// Validate checks the field values on
// OpenSearchSearcher_VectorQueryStrategy_FilterStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenSearchSearcher_VectorQueryStrategy_FilterStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// OpenSearchSearcher_VectorQueryStrategy_FilterStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenSearchSearcher_VectorQueryStrategy_FilterStrategyMultiError, or nil if
// none found.
func (m *OpenSearchSearcher_VectorQueryStrategy_FilterStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenSearchSearcher_VectorQueryStrategy_FilterStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _OpenSearchSearcher_VectorQueryStrategy_FilterStrategy_Mode_InLookup[m.GetMode()]; !ok {
		err := OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError{
			field:  "Mode",
			reason: "value must be in list [efficient-knn post-filter]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OpenSearchSearcher_VectorQueryStrategy_FilterStrategyMultiError(errors)
	}

	return nil
}

// OpenSearchSearcher_VectorQueryStrategy_FilterStrategyMultiError is an error
// wrapping multiple validation errors returned by
// OpenSearchSearcher_VectorQueryStrategy_FilterStrategy.ValidateAll() if the
// designated constraints aren't met.
type OpenSearchSearcher_VectorQueryStrategy_FilterStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenSearchSearcher_VectorQueryStrategy_FilterStrategyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenSearchSearcher_VectorQueryStrategy_FilterStrategyMultiError) AllErrors() []error {
	return m
}

// OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError is the
// validation error returned by
// OpenSearchSearcher_VectorQueryStrategy_FilterStrategy.Validate if the
// designated constraints aren't met.
type OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError) ErrorName() string {
	return "OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenSearchSearcher_VectorQueryStrategy_FilterStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenSearchSearcher_VectorQueryStrategy_FilterStrategyValidationError{}

var _OpenSearchSearcher_VectorQueryStrategy_FilterStrategy_Mode_InLookup = map[string]struct{}{
	"efficient-knn": {},
	"post-filter":   {},
}

// Validate checks the field values on
// OpenSearchSearcher_CompoundStrategy_FunctionScore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OpenSearchSearcher_CompoundStrategy_FunctionScore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// OpenSearchSearcher_CompoundStrategy_FunctionScore with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// OpenSearchSearcher_CompoundStrategy_FunctionScoreMultiError, or nil if none found.
func (m *OpenSearchSearcher_CompoundStrategy_FunctionScore) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenSearchSearcher_CompoundStrategy_FunctionScore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetFunctions()) < 1 {
		err := OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError{
			field:  "Functions",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFunctions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError{
						field:  fmt.Sprintf("Functions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError{
						field:  fmt.Sprintf("Functions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError{
					field:  fmt.Sprintf("Functions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OpenSearchSearcher_CompoundStrategy_FunctionScoreMultiError(errors)
	}

	return nil
}

// OpenSearchSearcher_CompoundStrategy_FunctionScoreMultiError is an error
// wrapping multiple validation errors returned by
// OpenSearchSearcher_CompoundStrategy_FunctionScore.ValidateAll() if the
// designated constraints aren't met.
type OpenSearchSearcher_CompoundStrategy_FunctionScoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenSearchSearcher_CompoundStrategy_FunctionScoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenSearchSearcher_CompoundStrategy_FunctionScoreMultiError) AllErrors() []error { return m }

// OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError is the
// validation error returned by
// OpenSearchSearcher_CompoundStrategy_FunctionScore.Validate if the
// designated constraints aren't met.
type OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError) ErrorName() string {
	return "OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError"
}

// Error satisfies the builtin error interface
func (e OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenSearchSearcher_CompoundStrategy_FunctionScore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenSearchSearcher_CompoundStrategy_FunctionScoreValidationError{}
