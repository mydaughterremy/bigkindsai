// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: searcher/searcher_resource.proto

package searcher

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SearcherResourceConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearcherResourceConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearcherResourceConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearcherResourceConfigMultiError, or nil if none found.
func (m *SearcherResourceConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *SearcherResourceConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Backend.(type) {
	case *SearcherResourceConfig_Cluster_:
		if v == nil {
			err := SearcherResourceConfigValidationError{
				field:  "Backend",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCluster()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearcherResourceConfigValidationError{
						field:  "Cluster",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearcherResourceConfigValidationError{
						field:  "Cluster",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearcherResourceConfigValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SearcherResourceConfigMultiError(errors)
	}

	return nil
}

// SearcherResourceConfigMultiError is an error wrapping multiple validation
// errors returned by SearcherResourceConfig.ValidateAll() if the designated
// constraints aren't met.
type SearcherResourceConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearcherResourceConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearcherResourceConfigMultiError) AllErrors() []error { return m }

// SearcherResourceConfigValidationError is the validation error returned by
// SearcherResourceConfig.Validate if the designated constraints aren't met.
type SearcherResourceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearcherResourceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearcherResourceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearcherResourceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearcherResourceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearcherResourceConfigValidationError) ErrorName() string {
	return "SearcherResourceConfigValidationError"
}

// Error satisfies the builtin error interface
func (e SearcherResourceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearcherResourceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearcherResourceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearcherResourceConfigValidationError{}

// Validate checks the field values on SearcherResourceConfig_ContainerResource
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SearcherResourceConfig_ContainerResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SearcherResourceConfig_ContainerResource with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SearcherResourceConfig_ContainerResourceMultiError, or nil if none found.
func (m *SearcherResourceConfig_ContainerResource) ValidateAll() error {
	return m.validate(true)
}

func (m *SearcherResourceConfig_ContainerResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCpu()) < 1 {
		err := SearcherResourceConfig_ContainerResourceValidationError{
			field:  "Cpu",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMemory()) < 1 {
		err := SearcherResourceConfig_ContainerResourceValidationError{
			field:  "Memory",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Gpu

	if len(errors) > 0 {
		return SearcherResourceConfig_ContainerResourceMultiError(errors)
	}

	return nil
}

// SearcherResourceConfig_ContainerResourceMultiError is an error wrapping
// multiple validation errors returned by
// SearcherResourceConfig_ContainerResource.ValidateAll() if the designated
// constraints aren't met.
type SearcherResourceConfig_ContainerResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearcherResourceConfig_ContainerResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearcherResourceConfig_ContainerResourceMultiError) AllErrors() []error { return m }

// SearcherResourceConfig_ContainerResourceValidationError is the validation
// error returned by SearcherResourceConfig_ContainerResource.Validate if the
// designated constraints aren't met.
type SearcherResourceConfig_ContainerResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearcherResourceConfig_ContainerResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearcherResourceConfig_ContainerResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearcherResourceConfig_ContainerResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearcherResourceConfig_ContainerResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearcherResourceConfig_ContainerResourceValidationError) ErrorName() string {
	return "SearcherResourceConfig_ContainerResourceValidationError"
}

// Error satisfies the builtin error interface
func (e SearcherResourceConfig_ContainerResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearcherResourceConfig_ContainerResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearcherResourceConfig_ContainerResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearcherResourceConfig_ContainerResourceValidationError{}

// Validate checks the field values on SearcherResourceConfig_Cluster with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearcherResourceConfig_Cluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearcherResourceConfig_Cluster with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearcherResourceConfig_ClusterMultiError, or nil if none found.
func (m *SearcherResourceConfig_Cluster) ValidateAll() error {
	return m.validate(true)
}

func (m *SearcherResourceConfig_Cluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _SearcherResourceConfig_Cluster_Context_InLookup[m.GetContext()]; !ok {
		err := SearcherResourceConfig_ClusterValidationError{
			field:  "Context",
			reason: "value must be in list [gangnam1 gangnam2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _SearcherResourceConfig_Cluster_Device_InLookup[m.GetDevice()]; !ok {
		err := SearcherResourceConfig_ClusterValidationError{
			field:  "Device",
			reason: "value must be in list [cpu a10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRequests()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearcherResourceConfig_ClusterValidationError{
					field:  "Requests",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearcherResourceConfig_ClusterValidationError{
					field:  "Requests",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequests()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearcherResourceConfig_ClusterValidationError{
				field:  "Requests",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLimits()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearcherResourceConfig_ClusterValidationError{
					field:  "Limits",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearcherResourceConfig_ClusterValidationError{
					field:  "Limits",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLimits()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearcherResourceConfig_ClusterValidationError{
				field:  "Limits",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearcherResourceConfig_ClusterMultiError(errors)
	}

	return nil
}

// SearcherResourceConfig_ClusterMultiError is an error wrapping multiple
// validation errors returned by SearcherResourceConfig_Cluster.ValidateAll()
// if the designated constraints aren't met.
type SearcherResourceConfig_ClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearcherResourceConfig_ClusterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearcherResourceConfig_ClusterMultiError) AllErrors() []error { return m }

// SearcherResourceConfig_ClusterValidationError is the validation error
// returned by SearcherResourceConfig_Cluster.Validate if the designated
// constraints aren't met.
type SearcherResourceConfig_ClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearcherResourceConfig_ClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearcherResourceConfig_ClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearcherResourceConfig_ClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearcherResourceConfig_ClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearcherResourceConfig_ClusterValidationError) ErrorName() string {
	return "SearcherResourceConfig_ClusterValidationError"
}

// Error satisfies the builtin error interface
func (e SearcherResourceConfig_ClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearcherResourceConfig_Cluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearcherResourceConfig_ClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearcherResourceConfig_ClusterValidationError{}

var _SearcherResourceConfig_Cluster_Context_InLookup = map[string]struct{}{
	"gangnam1": {},
	"gangnam2": {},
}

var _SearcherResourceConfig_Cluster_Device_InLookup = map[string]struct{}{
	"cpu": {},
	"a10": {},
}
