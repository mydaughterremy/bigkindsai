// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chat.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChatPayload with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatPayload with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatPayloadMultiError, or
// nil if none found.
func (m *ChatPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	// no validation rules for Content

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.FunctionCall != nil {

		if all {
			switch v := interface{}(m.GetFunctionCall()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatPayloadValidationError{
						field:  "FunctionCall",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatPayloadValidationError{
						field:  "FunctionCall",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFunctionCall()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatPayloadValidationError{
					field:  "FunctionCall",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatPayloadMultiError(errors)
	}

	return nil
}

// ChatPayloadMultiError is an error wrapping multiple validation errors
// returned by ChatPayload.ValidateAll() if the designated constraints aren't met.
type ChatPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatPayloadMultiError) AllErrors() []error { return m }

// ChatPayloadValidationError is the validation error returned by
// ChatPayload.Validate if the designated constraints aren't met.
type ChatPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatPayloadValidationError) ErrorName() string { return "ChatPayloadValidationError" }

// Error satisfies the builtin error interface
func (e ChatPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatPayloadValidationError{}

// Validate checks the field values on FunctionCall with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FunctionCall) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FunctionCall with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FunctionCallMultiError, or
// nil if none found.
func (m *FunctionCall) ValidateAll() error {
	return m.validate(true)
}

func (m *FunctionCall) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Arguments

	if len(errors) > 0 {
		return FunctionCallMultiError(errors)
	}

	return nil
}

// FunctionCallMultiError is an error wrapping multiple validation errors
// returned by FunctionCall.ValidateAll() if the designated constraints aren't met.
type FunctionCallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FunctionCallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FunctionCallMultiError) AllErrors() []error { return m }

// FunctionCallValidationError is the validation error returned by
// FunctionCall.Validate if the designated constraints aren't met.
type FunctionCallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FunctionCallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FunctionCallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FunctionCallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FunctionCallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FunctionCallValidationError) ErrorName() string { return "FunctionCallValidationError" }

// Error satisfies the builtin error interface
func (e FunctionCallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFunctionCall.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FunctionCallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FunctionCallValidationError{}

// Validate checks the field values on ChatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatRequestMultiError, or
// nil if none found.
func (m *ChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatRequestValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatRequestValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatRequestValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatRequestValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatRequestMultiError(errors)
	}

	return nil
}

// ChatRequestMultiError is an error wrapping multiple validation errors
// returned by ChatRequest.ValidateAll() if the designated constraints aren't met.
type ChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRequestMultiError) AllErrors() []error { return m }

// ChatRequestValidationError is the validation error returned by
// ChatRequest.Validate if the designated constraints aren't met.
type ChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRequestValidationError) ErrorName() string { return "ChatRequestValidationError" }

// Error satisfies the builtin error interface
func (e ChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRequestValidationError{}

// Validate checks the field values on ChatModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatModelMultiError, or nil
// if none found.
func (m *ChatModel) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	switch v := m.Options.(type) {
	case *ChatModel_GptOptions:
		if v == nil {
			err := ChatModelValidationError{
				field:  "Options",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGptOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatModelValidationError{
						field:  "GptOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatModelValidationError{
						field:  "GptOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGptOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatModelValidationError{
					field:  "GptOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChatModel_PalmOptions:
		if v == nil {
			err := ChatModelValidationError{
				field:  "Options",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPalmOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatModelValidationError{
						field:  "PalmOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatModelValidationError{
						field:  "PalmOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPalmOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatModelValidationError{
					field:  "PalmOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ChatModelMultiError(errors)
	}

	return nil
}

// ChatModelMultiError is an error wrapping multiple validation errors returned
// by ChatModel.ValidateAll() if the designated constraints aren't met.
type ChatModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatModelMultiError) AllErrors() []error { return m }

// ChatModelValidationError is the validation error returned by
// ChatModel.Validate if the designated constraints aren't met.
type ChatModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatModelValidationError) ErrorName() string { return "ChatModelValidationError" }

// Error satisfies the builtin error interface
func (e ChatModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatModelValidationError{}

// Validate checks the field values on ChatResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatResponseMultiError, or
// nil if none found.
func (m *ChatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FinishReason

	if m.Messages != nil {

		if all {
			switch v := interface{}(m.GetMessages()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatResponseValidationError{
						field:  "Messages",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatResponseValidationError{
						field:  "Messages",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessages()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatResponseValidationError{
					field:  "Messages",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.FunctionCall != nil {

		if all {
			switch v := interface{}(m.GetFunctionCall()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatResponseValidationError{
						field:  "FunctionCall",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatResponseValidationError{
						field:  "FunctionCall",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFunctionCall()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatResponseValidationError{
					field:  "FunctionCall",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatResponseMultiError(errors)
	}

	return nil
}

// ChatResponseMultiError is an error wrapping multiple validation errors
// returned by ChatResponse.ValidateAll() if the designated constraints aren't met.
type ChatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatResponseMultiError) AllErrors() []error { return m }

// ChatResponseValidationError is the validation error returned by
// ChatResponse.Validate if the designated constraints aren't met.
type ChatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatResponseValidationError) ErrorName() string { return "ChatResponseValidationError" }

// Error satisfies the builtin error interface
func (e ChatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatResponseValidationError{}

// Validate checks the field values on GptOptions with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GptOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GptOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GptOptionsMultiError, or
// nil if none found.
func (m *GptOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *GptOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Stream

	if m.FunctionCall != nil {
		// no validation rules for FunctionCall
	}

	if m.Temperature != nil {
		// no validation rules for Temperature
	}

	if m.TopP != nil {
		// no validation rules for TopP
	}

	if m.MaxTokens != nil {
		// no validation rules for MaxTokens
	}

	if m.PresencePenalty != nil {
		// no validation rules for PresencePenalty
	}

	if m.FrequencyPenalty != nil {
		// no validation rules for FrequencyPenalty
	}

	if m.ResponseFormat != nil {
		// no validation rules for ResponseFormat
	}

	if m.Seed != nil {
		// no validation rules for Seed
	}

	if len(errors) > 0 {
		return GptOptionsMultiError(errors)
	}

	return nil
}

// GptOptionsMultiError is an error wrapping multiple validation errors
// returned by GptOptions.ValidateAll() if the designated constraints aren't met.
type GptOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GptOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GptOptionsMultiError) AllErrors() []error { return m }

// GptOptionsValidationError is the validation error returned by
// GptOptions.Validate if the designated constraints aren't met.
type GptOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GptOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GptOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GptOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GptOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GptOptionsValidationError) ErrorName() string { return "GptOptionsValidationError" }

// Error satisfies the builtin error interface
func (e GptOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGptOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GptOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GptOptionsValidationError{}

// Validate checks the field values on PalmOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PalmOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PalmOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PalmOptionsMultiError, or
// nil if none found.
func (m *PalmOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *PalmOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Context != nil {
		// no validation rules for Context
	}

	if m.Temperature != nil {
		// no validation rules for Temperature
	}

	if m.TopP != nil {
		// no validation rules for TopP
	}

	if m.TopK != nil {
		// no validation rules for TopK
	}

	if m.MaxOutputTokens != nil {
		// no validation rules for MaxOutputTokens
	}

	if len(errors) > 0 {
		return PalmOptionsMultiError(errors)
	}

	return nil
}

// PalmOptionsMultiError is an error wrapping multiple validation errors
// returned by PalmOptions.ValidateAll() if the designated constraints aren't met.
type PalmOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PalmOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PalmOptionsMultiError) AllErrors() []error { return m }

// PalmOptionsValidationError is the validation error returned by
// PalmOptions.Validate if the designated constraints aren't met.
type PalmOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PalmOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PalmOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PalmOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PalmOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PalmOptionsValidationError) ErrorName() string { return "PalmOptionsValidationError" }

// Error satisfies the builtin error interface
func (e PalmOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPalmOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PalmOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PalmOptionsValidationError{}
