// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: event/event.proto

package event

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QaId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Event.(type) {
	case *Event_AnswerUpdated:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAnswerUpdated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "AnswerUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "AnswerUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAnswerUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "AnswerUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_QuestionCreated:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQuestionCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "QuestionCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "QuestionCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQuestionCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "QuestionCreated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_TokenCountUpdated:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTokenCountUpdated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "TokenCountUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "TokenCountUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTokenCountUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "TokenCountUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_ReferencesCreated:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReferencesCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "ReferencesCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "ReferencesCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReferencesCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "ReferencesCreated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_KeywordsCreated:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetKeywordsCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "KeywordsCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "KeywordsCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKeywordsCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "KeywordsCreated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_RelatedQueriesCreated:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRelatedQueriesCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "RelatedQueriesCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "RelatedQueriesCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRelatedQueriesCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "RelatedQueriesCreated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on AnswerUpdated with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AnswerUpdated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnswerUpdated with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnswerUpdatedMultiError, or
// nil if none found.
func (m *AnswerUpdated) ValidateAll() error {
	return m.validate(true)
}

func (m *AnswerUpdated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Answer

	// no validation rules for LlmProvider

	// no validation rules for LlmModel

	if len(errors) > 0 {
		return AnswerUpdatedMultiError(errors)
	}

	return nil
}

// AnswerUpdatedMultiError is an error wrapping multiple validation errors
// returned by AnswerUpdated.ValidateAll() if the designated constraints
// aren't met.
type AnswerUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnswerUpdatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnswerUpdatedMultiError) AllErrors() []error { return m }

// AnswerUpdatedValidationError is the validation error returned by
// AnswerUpdated.Validate if the designated constraints aren't met.
type AnswerUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnswerUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnswerUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnswerUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnswerUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnswerUpdatedValidationError) ErrorName() string { return "AnswerUpdatedValidationError" }

// Error satisfies the builtin error interface
func (e AnswerUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnswerUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnswerUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnswerUpdatedValidationError{}

// Validate checks the field values on QuestionCreated with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QuestionCreated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionCreated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionCreatedMultiError, or nil if none found.
func (m *QuestionCreated) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionCreated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChatId

	// no validation rules for SessionId

	// no validation rules for JobGroup

	// no validation rules for Question

	if len(errors) > 0 {
		return QuestionCreatedMultiError(errors)
	}

	return nil
}

// QuestionCreatedMultiError is an error wrapping multiple validation errors
// returned by QuestionCreated.ValidateAll() if the designated constraints
// aren't met.
type QuestionCreatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionCreatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionCreatedMultiError) AllErrors() []error { return m }

// QuestionCreatedValidationError is the validation error returned by
// QuestionCreated.Validate if the designated constraints aren't met.
type QuestionCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionCreatedValidationError) ErrorName() string { return "QuestionCreatedValidationError" }

// Error satisfies the builtin error interface
func (e QuestionCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionCreatedValidationError{}

// Validate checks the field values on TokenCountUpdated with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TokenCountUpdated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenCountUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokenCountUpdatedMultiError, or nil if none found.
func (m *TokenCountUpdated) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenCountUpdated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenCount

	if len(errors) > 0 {
		return TokenCountUpdatedMultiError(errors)
	}

	return nil
}

// TokenCountUpdatedMultiError is an error wrapping multiple validation errors
// returned by TokenCountUpdated.ValidateAll() if the designated constraints
// aren't met.
type TokenCountUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenCountUpdatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenCountUpdatedMultiError) AllErrors() []error { return m }

// TokenCountUpdatedValidationError is the validation error returned by
// TokenCountUpdated.Validate if the designated constraints aren't met.
type TokenCountUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenCountUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenCountUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenCountUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenCountUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenCountUpdatedValidationError) ErrorName() string {
	return "TokenCountUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e TokenCountUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenCountUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenCountUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenCountUpdatedValidationError{}

// Validate checks the field values on ReferenceAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReferenceAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReferenceAttributes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReferenceAttributesMultiError, or nil if none found.
func (m *ReferenceAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ReferenceAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewsId

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetPublishedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReferenceAttributesValidationError{
					field:  "PublishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReferenceAttributesValidationError{
					field:  "PublishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReferenceAttributesValidationError{
				field:  "PublishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Provider

	// no validation rules for Byline

	// no validation rules for Content

	if len(errors) > 0 {
		return ReferenceAttributesMultiError(errors)
	}

	return nil
}

// ReferenceAttributesMultiError is an error wrapping multiple validation
// errors returned by ReferenceAttributes.ValidateAll() if the designated
// constraints aren't met.
type ReferenceAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReferenceAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReferenceAttributesMultiError) AllErrors() []error { return m }

// ReferenceAttributesValidationError is the validation error returned by
// ReferenceAttributes.Validate if the designated constraints aren't met.
type ReferenceAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReferenceAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReferenceAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReferenceAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReferenceAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReferenceAttributesValidationError) ErrorName() string {
	return "ReferenceAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ReferenceAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReferenceAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReferenceAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReferenceAttributesValidationError{}

// Validate checks the field values on Reference with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reference with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReferenceMultiError, or nil
// if none found.
func (m *Reference) ValidateAll() error {
	return m.validate(true)
}

func (m *Reference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReferenceValidationError{
					field:  "Attributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReferenceValidationError{
					field:  "Attributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReferenceValidationError{
				field:  "Attributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReferenceMultiError(errors)
	}

	return nil
}

// ReferenceMultiError is an error wrapping multiple validation errors returned
// by Reference.ValidateAll() if the designated constraints aren't met.
type ReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReferenceMultiError) AllErrors() []error { return m }

// ReferenceValidationError is the validation error returned by
// Reference.Validate if the designated constraints aren't met.
type ReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReferenceValidationError) ErrorName() string { return "ReferenceValidationError" }

// Error satisfies the builtin error interface
func (e ReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReferenceValidationError{}

// Validate checks the field values on ReferencesCreated with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReferencesCreated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReferencesCreated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReferencesCreatedMultiError, or nil if none found.
func (m *ReferencesCreated) ValidateAll() error {
	return m.validate(true)
}

func (m *ReferencesCreated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReferencesCreatedValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReferencesCreatedValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReferencesCreatedValidationError{
					field:  fmt.Sprintf("References[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReferencesCreatedMultiError(errors)
	}

	return nil
}

// ReferencesCreatedMultiError is an error wrapping multiple validation errors
// returned by ReferencesCreated.ValidateAll() if the designated constraints
// aren't met.
type ReferencesCreatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReferencesCreatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReferencesCreatedMultiError) AllErrors() []error { return m }

// ReferencesCreatedValidationError is the validation error returned by
// ReferencesCreated.Validate if the designated constraints aren't met.
type ReferencesCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReferencesCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReferencesCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReferencesCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReferencesCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReferencesCreatedValidationError) ErrorName() string {
	return "ReferencesCreatedValidationError"
}

// Error satisfies the builtin error interface
func (e ReferencesCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReferencesCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReferencesCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReferencesCreatedValidationError{}

// Validate checks the field values on KeywordsCreated with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KeywordsCreated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeywordsCreated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KeywordsCreatedMultiError, or nil if none found.
func (m *KeywordsCreated) ValidateAll() error {
	return m.validate(true)
}

func (m *KeywordsCreated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return KeywordsCreatedMultiError(errors)
	}

	return nil
}

// KeywordsCreatedMultiError is an error wrapping multiple validation errors
// returned by KeywordsCreated.ValidateAll() if the designated constraints
// aren't met.
type KeywordsCreatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeywordsCreatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeywordsCreatedMultiError) AllErrors() []error { return m }

// KeywordsCreatedValidationError is the validation error returned by
// KeywordsCreated.Validate if the designated constraints aren't met.
type KeywordsCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeywordsCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeywordsCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeywordsCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeywordsCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeywordsCreatedValidationError) ErrorName() string { return "KeywordsCreatedValidationError" }

// Error satisfies the builtin error interface
func (e KeywordsCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeywordsCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeywordsCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeywordsCreatedValidationError{}

// Validate checks the field values on RelatedQueriesCreated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelatedQueriesCreated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelatedQueriesCreated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelatedQueriesCreatedMultiError, or nil if none found.
func (m *RelatedQueriesCreated) ValidateAll() error {
	return m.validate(true)
}

func (m *RelatedQueriesCreated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RelatedQueriesCreatedMultiError(errors)
	}

	return nil
}

// RelatedQueriesCreatedMultiError is an error wrapping multiple validation
// errors returned by RelatedQueriesCreated.ValidateAll() if the designated
// constraints aren't met.
type RelatedQueriesCreatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelatedQueriesCreatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelatedQueriesCreatedMultiError) AllErrors() []error { return m }

// RelatedQueriesCreatedValidationError is the validation error returned by
// RelatedQueriesCreated.Validate if the designated constraints aren't met.
type RelatedQueriesCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelatedQueriesCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelatedQueriesCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelatedQueriesCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelatedQueriesCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelatedQueriesCreatedValidationError) ErrorName() string {
	return "RelatedQueriesCreatedValidationError"
}

// Error satisfies the builtin error interface
func (e RelatedQueriesCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelatedQueriesCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelatedQueriesCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelatedQueriesCreatedValidationError{}
